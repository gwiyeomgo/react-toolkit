{
  "compilerOptions": {
    "baseUrl": "./",
    // tsc 컴파일된 JavaScript 파일을 저장할 디렉토리 지정
    "outDir": "./dist",
    "rootDir": "./", // 컴파일할 소스 코드가 있는 디렉토리
    //TODO jest 에서 적용 실패 ... 이유 찾고 개선 하기
    //절대 경로로 컴포넌트 추가
    //보통 상대 경로를 사용하여 불러와 사용=> 복잡해지면 위치 파악하기 어려움
    //https://www.daleseo.com/tsconfig-path-mapping/
    //"baseUrl": "./src" //src 폴더를 기본으로 하는 절대 경로 컴포넌트를 추가할 수 있다.
    //별칭 사용을 원할때=> jest 를 사용하는 경우 moduleNameMapper 에 설정도 변경 필요
    "paths": {
      //baseUrl 옵션으로 이미 ./src을 지정해준 경우, paths 옵션에서 ./src를 생략 가능
      //  "#/*": ["lib/*"],
      // "#/*": ["*"], //내부 모듈을 대표할 수 있는 특수 기호를 딱 하나만 등록
      // "#utils/*": ["lib/Util/*"],
      //"#hooks/*": ["lib/Util/hooks/*"],
      //"react-beautiful-dnd": ["node_modules/react-beautiful-dnd"]
    },

    //TS17004: Cannot use JSX unless the '--jsx' flag is provided.
    //https://stackoverflow.com/questions/47867370/tsx-is-not-getting-converted-to-jsx
    //react 모드
    //JSX 코드는 React.createElement() 함수의 호출로 변환됨
    "jsx": "react", // tsx 파일을 jsx로 어떻게 컴파일할 것인지 'preserve', 'react-native', 'react'
    "jsxFactory": "React.createElement",
    "jsxFragmentFactory": "React.Fragment",

    "module": "esnext" /* 생성될 모듈 코드 설정: commonjs ,esnext */,
    "moduleResolution": "node" /* 모듈 분석 방법 설정: 'node' (Node.js) 또는 'classic'*/,

    "target": "es6",
    "lib": ["dom", "es2017"],

    /* Type Checking */
    //https://typescript-kr.github.io/pages/compiler-options.html

    "noUnusedParameters": true, //사용하지 않는 매개변수 체크
    "noUnusedLocals": true, //사용하지 않는 로컬 변수 체크
    "noImplicitAny": true, //암시적 any 방지
    "strict": true, //엄격한 타입 체크
    "skipLibCheck": true, //라이브러리 체크 생략
    "stripInternal": true, //내부 선언 제거
    "strictNullChecks": true, //null 체크 강화
    "esModuleInterop": true, // ES 모듈 상호 운용성

    //TypeScript 컴파일러가 .tsx 파일을 .js 파일로 컴파일할 때 원래의 JavaScript 파일을 덮어쓰지 않고, 새로운 디렉토리에 컴파일된 파일을 생성하게 됩니다.
    //TypeScript 컴파일러에게 .tsx 파일을 컴파일할 때 기존에 이미 존재하는 .js 파일을 덮어쓰지 않도록 설정
    // 타입 선언 파일 (.d.ts)만 생성하도록
    "declaration": true,
    //https://kyounghwan01.github.io/blog/TS/React/dependency-install/#types-xxx-가-없을때
    "typeRoots": ["./node_modules/@types", "src/types"]
  },
  "include": ["src/**/*.tsx", "src/**/*.ts"],
  //"include": ["src/**/*"],
  "exclude": ["node_modules", "./src/demo_init_ts", "./src/stories", "./tests"]
}
